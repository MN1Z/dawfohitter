-- DAWFO HEADSHOTTA V2
-- Head Hitbox Expander + Player/NPC Teleporter with RGB UI

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGui = game:GetService("CoreGui")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer

-- Clean up existing GUI
if CoreGui:FindFirstChild("DawfoHeadShotta") then
    CoreGui.DawfoHeadShotta:Destroy()
end

-- Toggle Button
local ToggleButton = Instance.new("TextButton")
ToggleButton.Name = "ToggleButton"
ToggleButton.Parent = ScreenGui
ToggleButton.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
ToggleButton.BorderColor3 = Color3.fromRGB(139, 0, 0)
ToggleButton.BorderSizePixel = 2
ToggleButton.Position = UDim2.new(0, 10, 0, 10)
ToggleButton.Size = UDim2.new(0, 50, 0, 50)
ToggleButton.Font = Enum.Font.GothamBold
ToggleButton.Text = "üê∑üî´"
ToggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ToggleButton.TextSize = 20

-- Add corner rounding
local ToggleCorner = Instance.new("UICorner")
ToggleCorner.CornerRadius = UDim.new(0, 8)
ToggleCorner.Parent = ToggleButton

createRGBEffect(ToggleButton, "BorderColor3")

-- Create main GUI in CoreGui for persistence
local ScreenGui = Instance.new("ScreenGui")
local MainFrame = Instance.new("Frame")
local TitleLabel = Instance.new("TextLabel")
local HeadSizeFrame = Instance.new("Frame")
local SizeLabel = Instance.new("TextLabel")
local SizeSlider = Instance.new("TextBox")
local SliderBar = Instance.new("Frame")
local SliderButton = Instance.new("TextButton")
local ApplyButton = Instance.new("TextButton")
local ResetButton = Instance.new("TextButton")
local TeleportFrame = Instance.new("Frame")
local TeleportLabel = Instance.new("TextLabel")
local TeleportButton = Instance.new("TextButton")
local StatusLabel = Instance.new("TextLabel")
local CloseButton = Instance.new("TextButton")

-- Properties
ScreenGui.Name = "DawfoHeadShotta"
ScreenGui.Parent = CoreGui
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Main Frame
MainFrame.Name = "MainFrame"
MainFrame.Parent = ScreenGui
MainFrame.BackgroundColor3 = Color3.fromRGB(15, 0, 0)
MainFrame.BorderColor3 = Color3.fromRGB(139, 0, 0)
MainFrame.BorderSizePixel = 3
MainFrame.Position = UDim2.new(0.1, 0, 0.1, 0)
MainFrame.Size = UDim2.new(0, 380, 0, 400)
MainFrame.Active = true
MainFrame.Draggable = true

-- Add gradient background
local Gradient = Instance.new("UIGradient")
Gradient.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(25, 0, 0)),
    ColorSequenceKeypoint.new(1, Color3.fromRGB(10, 0, 0))
}
Gradient.Rotation = 45
Gradient.Parent = MainFrame

-- Add corner rounding
local MainCorner = Instance.new("UICorner")
MainCorner.CornerRadius = UDim.new(0, 15)
MainCorner.Parent = MainFrame

-- Close Button
CloseButton.Name = "CloseButton"
CloseButton.Parent = MainFrame
CloseButton.BackgroundColor3 = Color3.fromRGB(139, 0, 0)
CloseButton.BorderSizePixel = 0
CloseButton.Position = UDim2.new(0.9, 0, 0.02, 0)
CloseButton.Size = UDim2.new(0, 30, 0, 30)
CloseButton.Font = Enum.Font.GothamBold
CloseButton.Text = "√ó"
CloseButton.TextColor3 = Color3.fromRGB(255, 255, 255)
CloseButton.TextScaled = true

local CloseCorner = Instance.new("UICorner")
CloseCorner.CornerRadius = UDim.new(0, 15)
CloseCorner.Parent = CloseButton

-- Title Label
TitleLabel.Name = "TitleLabel"
TitleLabel.Parent = MainFrame
TitleLabel.BackgroundTransparency = 1
TitleLabel.Position = UDim2.new(0, 0, 0, 0)
TitleLabel.Size = UDim2.new(0.85, 0, 0, 45)
TitleLabel.Font = Enum.Font.GothamBold
TitleLabel.Text = "DAWFO HEADSHOTTA"
TitleLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
TitleLabel.TextScaled = true
TitleLabel.TextStrokeColor3 = Color3.fromRGB(139, 0, 0)
TitleLabel.TextStrokeTransparency = 0

-- Head Size Frame
HeadSizeFrame.Name = "HeadSizeFrame"
HeadSizeFrame.Parent = MainFrame
HeadSizeFrame.BackgroundColor3 = Color3.fromRGB(40, 0, 0)
HeadSizeFrame.BorderColor3 = Color3.fromRGB(100, 0, 0)
HeadSizeFrame.BorderSizePixel = 2
HeadSizeFrame.Position = UDim2.new(0.05, 0, 0.15, 0)
HeadSizeFrame.Size = UDim2.new(0.9, 0, 0.25, 0)

local HeadSizeCorner = Instance.new("UICorner")
HeadSizeCorner.CornerRadius = UDim.new(0, 10)
HeadSizeCorner.Parent = HeadSizeFrame

-- Size Label
SizeLabel.Name = "SizeLabel"
SizeLabel.Parent = HeadSizeFrame
SizeLabel.BackgroundTransparency = 1
SizeLabel.Position = UDim2.new(0, 10, 0, 5)
SizeLabel.Size = UDim2.new(0.6, 0, 0.3, 0)
SizeLabel.Font = Enum.Font.Gotham
SizeLabel.Text = "Head Size Multiplier:"
SizeLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
SizeLabel.TextScaled = true
SizeLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Size Input
SizeSlider.Name = "SizeSlider"
SizeSlider.Parent = HeadSizeFrame
SizeSlider.BackgroundColor3 = Color3.fromRGB(60, 0, 0)
SizeSlider.BorderColor3 = Color3.fromRGB(139, 0, 0)
SizeSlider.BorderSizePixel = 2
SizeSlider.Position = UDim2.new(0.65, 0, 0.05, 0)
SizeSlider.Size = UDim2.new(0.3, 0, 0.35, 0)
SizeSlider.Font = Enum.Font.GothamBold
SizeSlider.PlaceholderText = "5-50"
SizeSlider.Text = "20"
SizeSlider.TextColor3 = Color3.fromRGB(255, 255, 255)
SizeSlider.TextScaled = true

local SizeSliderCorner = Instance.new("UICorner")
SizeSliderCorner.CornerRadius = UDim.new(0, 6)
SizeSliderCorner.Parent = SizeSlider

-- Slider Bar
SliderBar.Name = "SliderBar"
SliderBar.Parent = HeadSizeFrame
SliderBar.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
SliderBar.BorderColor3 = Color3.fromRGB(139, 0, 0)
SliderBar.BorderSizePixel = 1
SliderBar.Position = UDim2.new(0.05, 0, 0.55, 0)
SliderBar.Size = UDim2.new(0.7, 0, 0.15, 0)

local SliderBarCorner = Instance.new("UICorner")
SliderBarCorner.CornerRadius = UDim.new(0, 5)
SliderBarCorner.Parent = SliderBar

-- Slider Button
SliderButton.Name = "SliderButton"
SliderButton.Parent = SliderBar
SliderButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
SliderButton.BorderSizePixel = 0
SliderButton.Position = UDim2.new(0.33, 0, 0, 0)
SliderButton.Size = UDim2.new(0, 25, 1, 0)
SliderButton.Font = Enum.Font.Gotham
SliderButton.Text = ""

local SliderButtonCorner = Instance.new("UICorner")
SliderButtonCorner.CornerRadius = UDim.new(0, 5)
SliderButtonCorner.Parent = SliderButton

-- Apply Button
ApplyButton.Name = "ApplyButton"
ApplyButton.Parent = MainFrame
ApplyButton.BackgroundColor3 = Color3.fromRGB(139, 0, 0)
ApplyButton.BorderColor3 = Color3.fromRGB(220, 20, 60)
ApplyButton.BorderSizePixel = 2
ApplyButton.Position = UDim2.new(0.05, 0, 0.45, 0)
ApplyButton.Size = UDim2.new(0.4, 0, 0.12, 0)
ApplyButton.Font = Enum.Font.GothamBold
ApplyButton.Text = "APPLY HEADS"
ApplyButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ApplyButton.TextScaled = true

local ApplyCorner = Instance.new("UICorner")
ApplyCorner.CornerRadius = UDim.new(0, 8)
ApplyCorner.Parent = ApplyButton

-- Reset Button
ResetButton.Name = "ResetButton"
ResetButton.Parent = MainFrame
ResetButton.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
ResetButton.BorderColor3 = Color3.fromRGB(139, 0, 0)
ResetButton.BorderSizePixel = 2
ResetButton.Position = UDim2.new(0.55, 0, 0.45, 0)
ResetButton.Size = UDim2.new(0.4, 0, 0.12, 0)
ResetButton.Font = Enum.Font.GothamBold
ResetButton.Text = "RESET HEADS"
ResetButton.TextColor3 = Color3.fromRGB(255, 255, 255)
ResetButton.TextScaled = true

local ResetCorner = Instance.new("UICorner")
ResetCorner.CornerRadius = UDim.new(0, 8)
ResetCorner.Parent = ResetButton

-- Teleport Frame
TeleportFrame.Name = "TeleportFrame"
TeleportFrame.Parent = MainFrame
TeleportFrame.BackgroundColor3 = Color3.fromRGB(40, 0, 0)
TeleportFrame.BorderColor3 = Color3.fromRGB(100, 0, 0)
TeleportFrame.BorderSizePixel = 2
TeleportFrame.Position = UDim2.new(0.05, 0, 0.62, 0)
TeleportFrame.Size = UDim2.new(0.9, 0, 0.15, 0)

local TeleportCorner = Instance.new("UICorner")
TeleportCorner.CornerRadius = UDim.new(0, 10)
TeleportCorner.Parent = TeleportFrame

-- Teleport Label
TeleportLabel.Name = "TeleportLabel"
TeleportLabel.Parent = TeleportFrame
TeleportLabel.BackgroundTransparency = 1
TeleportLabel.Position = UDim2.new(0, 10, 0, 0)
TeleportLabel.Size = UDim2.new(0.6, 0, 1, 0)
TeleportLabel.Font = Enum.Font.Gotham
TeleportLabel.Text = "Loop Teleport Players/NPCs:"
TeleportLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
TeleportLabel.TextScaled = true
TeleportLabel.TextXAlignment = Enum.TextXAlignment.Left

-- Teleport Button
TeleportButton.Name = "TeleportButton"
TeleportButton.Parent = TeleportFrame
TeleportButton.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
TeleportButton.BorderColor3 = Color3.fromRGB(139, 0, 0)
TeleportButton.BorderSizePixel = 2
TeleportButton.Position = UDim2.new(0.65, 0, 0.15, 0)
TeleportButton.Size = UDim2.new(0.3, 0, 0.7, 0)
TeleportButton.Font = Enum.Font.GothamBold
TeleportButton.Text = "OFF"
TeleportButton.TextColor3 = Color3.fromRGB(255, 255, 255)
TeleportButton.TextScaled = true

local TeleportButtonCorner = Instance.new("UICorner")
TeleportButtonCorner.CornerRadius = UDim.new(0, 6)
TeleportButtonCorner.Parent = TeleportButton

-- Status Label
StatusLabel.Name = "StatusLabel"
StatusLabel.Parent = MainFrame
StatusLabel.BackgroundTransparency = 1
StatusLabel.Position = UDim2.new(0.05, 0, 0.82, 0)
StatusLabel.Size = UDim2.new(0.9, 0, 0.15, 0)
StatusLabel.Font = Enum.Font.Gotham
StatusLabel.Text = "Ready to modify heads and teleport..."
StatusLabel.TextColor3 = Color3.fromRGB(255, 200, 200)
StatusLabel.TextScaled = true

-- Variables
local originalHeadSizes = {}
local isDragging = false
local teleportLoop = false
local teleportConnection = nil

-- RGB Animation
spawn(function()
    while ScreenGui.Parent do
        for i = 0, 1, 0.01 do
            if not ScreenGui.Parent then break end
            local hue = i
            local rgb = Color3.fromHSV(hue, 1, 1)
            MainFrame.BorderColor3 = rgb
            TitleLabel.TextStrokeColor3 = rgb
            SliderButton.BackgroundColor3 = rgb
            ApplyButton.BorderColor3 = rgb
            wait(0.03)
        end
    end
end)

-- Close button functionality
CloseButton.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

-- Slider functionality
local function updateSlider(value)
    value = math.clamp(value, 5, 50)
    SizeSlider.Text = tostring(value)
    local percentage = (value - 5) / 45
    SliderButton.Position = UDim2.new(percentage * 0.85, 0, 0, 0)
end

-- Slider dragging
SliderButton.MouseButton1Down:Connect(function()
    isDragging = true
end)

UserInputService.InputChanged:Connect(function(input)
    if isDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
        local sliderPos = SliderBar.AbsolutePosition.X
        local sliderSize = SliderBar.AbsoluteSize.X
        local mousePos = input.Position.X
        
        local percentage = math.clamp((mousePos - sliderPos) / sliderSize, 0, 0.85)
        local value = math.floor(5 + (percentage * 45))
        
        updateSlider(value)
    end
end)

UserInputService.InputEnded:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        isDragging = false
    end
end)

-- Text input handling
SizeSlider.FocusLost:Connect(function()
    local value = tonumber(SizeSlider.Text)
    if value then
        value = math.clamp(value, 5, 50)
        updateSlider(value)
    else
        updateSlider(20)
    end
end)

-- Get all characters (players and NPCs)
local function getAllCharacters()
    local characters = {}
    
    -- Get player characters
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("Head") then
            table.insert(characters, {character = player.Character, name = player.Name, isPlayer = true})
        end
    end
    
    -- Get NPC characters
    for _, obj in pairs(Workspace:GetDescendants()) do
        if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and obj:FindFirstChild("Head") then
            local isPlayerCharacter = false
            for _, player in pairs(Players:GetPlayers()) do
                if player.Character == obj then
                    isPlayerCharacter = true
                    break
                end
            end
            
            if not isPlayerCharacter and obj ~= LocalPlayer.Character then
                table.insert(characters, {character = obj, name = obj.Name, isPlayer = false})
            end
        end
    end
    
    return characters
end

-- Head modification functions
local function modifyHead(character, multiplier)
    local head = character:FindFirstChild("Head")
    if not head then return false end
    
    -- Store original size if not already stored
    if not originalHeadSizes[character] then
        originalHeadSizes[character] = head.Size
    end
    
    -- Apply new size
    head.Size = originalHeadSizes[character] * multiplier
    head.Transparency = 0.3
    
    -- Update mesh if exists
    if head:FindFirstChild("Mesh") then
        head.Mesh.Scale = Vector3.new(multiplier, multiplier, multiplier)
    end
    
    return true
end

local function resetHead(character)
    local head = character:FindFirstChild("Head")
    if not head or not originalHeadSizes[character] then return false end
    
    -- Restore original size
    head.Size = originalHeadSizes[character]
    head.Transparency = 0
    
    -- Reset mesh
    if head:FindFirstChild("Mesh") then
        head.Mesh.Scale = Vector3.new(1, 1, 1)
    end
    
    return true
end

-- Apply button
ApplyButton.MouseButton1Click:Connect(function()
    local multiplier = tonumber(SizeSlider.Text) or 20
    multiplier = math.clamp(multiplier, 5, 50)
    
    local characters = getAllCharacters()
    local count = 0
    
    for _, data in pairs(characters) do
        if modifyHead(data.character, multiplier) then
            count = count + 1
        end
    end
    
    StatusLabel.Text = string.format("Modified %d heads with %dx multiplier", count, multiplier)
    
    -- Button feedback
    ApplyButton.BackgroundColor3 = Color3.fromRGB(60, 179, 113)
    wait(0.2)
    ApplyButton.BackgroundColor3 = Color3.fromRGB(139, 0, 0)
end)

-- Reset button
ResetButton.MouseButton1Click:Connect(function()
    local characters = getAllCharacters()
    local count = 0
    
    for _, data in pairs(characters) do
        if resetHead(data.character) then
            count = count + 1
        end
    end
    
    originalHeadSizes = {}
    StatusLabel.Text = string.format("Reset %d heads to normal", count)
    
    -- Button feedback
    ResetButton.BackgroundColor3 = Color3.fromRGB(220, 20, 60)
    wait(0.2)
    ResetButton.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
end)

-- Teleport functionality
local function startTeleportLoop()
    teleportConnection = RunService.Heartbeat:Connect(function()
        if not LocalPlayer.Character or not LocalPlayer.Character:FindFirstChild("HumanoidRootPart") then
            return
        end
        
        local myPosition = LocalPlayer.Character.HumanoidRootPart.CFrame
        local characters = getAllCharacters()
        
        for _, data in pairs(characters) do
            local character = data.character
            local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
            
            if humanoidRootPart then
                -- Calculate position 10 studs in front of the local player
                local frontPosition = myPosition + myPosition.LookVector * 10
                humanoidRootPart.CFrame = CFrame.new(frontPosition.Position)
            end
        end
    end)
end

local function stopTeleportLoop()
    if teleportConnection then
        teleportConnection:Disconnect()
        teleportConnection = nil
    end
end

-- Teleport button
TeleportButton.MouseButton1Click:Connect(function()
    teleportLoop = not teleportLoop
    
    if teleportLoop then
        TeleportButton.Text = "ON"
        TeleportButton.BackgroundColor3 = Color3.fromRGB(60, 179, 113)
        startTeleportLoop()
        StatusLabel.Text = "Teleport loop: ACTIVE"
    else
        TeleportButton.Text = "OFF"
        TeleportButton.BackgroundColor3 = Color3.fromRGB(80, 0, 0)
        stopTeleportLoop()
        StatusLabel.Text = "Teleport loop: DISABLED"
    end
end)

-- Handle character respawning for persistence
LocalPlayer.CharacterAdded:Connect(function()
    wait(2) -- Wait for character to fully load
    
    -- Reapply head modifications if they were active
    if tonumber(SizeSlider.Text) and tonumber(SizeSlider.Text) > 5 then
        local multiplier = tonumber(SizeSlider.Text)
        local characters = getAllCharacters()
        
        for _, data in pairs(characters) do
            modifyHead(data.character, multiplier)
        end
    end
end)

-- Handle new players/NPCs
Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        wait(1)
        if tonumber(SizeSlider.Text) and tonumber(SizeSlider.Text) > 5 then
            if player.Character and player ~= LocalPlayer then
                modifyHead(player.Character, tonumber(SizeSlider.Text))
            end
        end
    end)
end)

-- Mobile support improvements
if UserInputService.TouchEnabled then
    MainFrame.Active = true
    MainFrame.Draggable = true
    
    -- Improve touch responsiveness
    for _, button in pairs({ApplyButton, ResetButton, TeleportButton, SliderButton, CloseButton}) do
        button.AutoButtonColor = false
    end
end

-- Workspace monitoring for new NPCs
spawn(function()
    while ScreenGui.Parent do
        wait(5) -- Check every 5 seconds for new NPCs
        
        if tonumber(SizeSlider.Text) and tonumber(SizeSlider.Text) > 5 then
            local multiplier = tonumber(SizeSlider.Text)
            local characters = getAllCharacters()
            
            for _, data in pairs(characters) do
                if not originalHeadSizes[data.character] then
                    modifyHead(data.character, multiplier)
                end
            end
        end
    end
end)

StatusLabel.Text = "DAWFO HEADSHOTTA V2 loaded successfully!"
